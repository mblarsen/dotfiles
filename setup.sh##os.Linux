#!/usr/bin/env bash

# set -x

export XDG_CONFIG_HOME=$HOME/.config
export XDG_DATA_HOME=$HOME/.local/share
export XDG_BIN_HOME=$HOME/.local/bin
export XDG_LIB_HOME=$HOME/.local/lib
export XDG_CACHE_HOME=$HOME/.cache

export ZPLUG_HOME="$XDG_DATA_HOME/zplug"

export PATH="$XDG_BIN_HOME:$PATH"

sudo timedatectl set-timezone Asia/Manila

sudo apt update

sudo apt install -y \
  curl \
  direnv \
  fzf \
  lsd \
  make \
  ripgrep \
  uuid-dev \
  unzip \
  yadm

# pyenv build dependencies
sudo apt install -y build-essential libssl-dev zlib1g-dev \
  libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm \
  libncursesw5-dev xz-utils tk-dev libxml2-dev \
  libxmlsec1-dev libffi-dev liblzma-dev
sudo apt install -y libgdbm-dev libnss3-dev libedit-dev

sudo snap install zig --classic --beta


function install_rustup() {
  if type cargo &> /dev/null; then
    echo "rustup is already installed"
  else
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
  fi
}

function setup_ssh() {
  GITHUB_SSH="$HOME/.ssh/github_ed25519"
  if [ -f "$GITHUB_SSH" ]; then
    echo "GitHub SSH key already exists"
  else
    ssh-keygen -t ed25519 -C "mbl@code.boutique" -f "GITHUB_SSH" -N ""
  fi
}

function install_docker() {
  if type docker &> /dev/null; then
    echo "docker is already installed"
  else
    sudo apt install -y curl apt-transport-https ca-certificates software-properties-common 
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    sudo apt update
    sudo apt install -y docker-ce
    sudo usermod -aG docker $USER
  fi
}

function install_gh() {
  if type gh &> /dev/null; then
    echo "gh is already installed"
  else
    (type -p wget >/dev/null || (sudo apt update && sudo apt-get install wget -y)) \
    && sudo mkdir -p -m 755 /etc/apt/keyrings \
          && out=$(mktemp) && wget -nv -O$out https://cli.github.com/packages/githubcli-archive-keyring.gpg \
          && cat $out | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null \
    && sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
    && sudo apt update \
    && sudo apt install -y gh
  fi
}

function install_taskwarrior() {
  if type task &> /dev/null; then
    echo "taskwarrior is already installed"
  else
    REPO="GothenburgBitFactory/taskwarrior"
    VERSION="3.1.0"
    FILENAME="task-${VERSION}.tar.gz"
    URL="https://github.com/$REPO/releases/download/v${VERSION}/${FILENAME}"

    mkdir -p "$XDG_BIN_HOME"

    # Download the file to a temporary location
    TEMP_ZIP="/tmp/$FILENAME"
    curl -s -L -o "$TEMP_ZIP" "$URL"

    # Extract the binary to a temporary directory
    tar -xzf "$TEMP_ZIP" -C "$XDG_CACHE_HOME/"

    pushd "$XDG_CACHE_HOME/task-${VERSION}"

    cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
    cmake --build build
    sudo cmake --install build

    # Ensure the binary is executable
    # chmod +x "$XDG_BIN_HOME/task"

    # Clean up the temporary files and directory
    # rm "$TEMP_ZIP"

    # echo "task has been installed to $XDG_BIN_HOME and is available in your PATH."
  fi
}

function install_1password() {
  if type op &> /dev/null; then
    echo "1password is already installed"
  else
    curl -sS https://downloads.1password.com/linux/keys/1password.asc | \
    sudo gpg --dearmor --output /usr/share/keyrings/1password-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/1password-archive-keyring.gpg] https://downloads.1password.com/linux/debian/$(dpkg --print-architecture) stable main" | \
    sudo tee /etc/apt/sources.list.d/1password.list && \
    sudo mkdir -p /etc/debsig/policies/AC2D62742012EA22/ && \
    curl -sS https://downloads.1password.com/linux/debian/debsig/1password.pol | \
    sudo tee /etc/debsig/policies/AC2D62742012EA22/1password.pol && \
    sudo mkdir -p /usr/share/debsig/keyrings/AC2D62742012EA22 && \
    curl -sS https://downloads.1password.com/linux/keys/1password.asc | \
    sudo gpg --dearmor --output /usr/share/debsig/keyrings/AC2D62742012EA22/debsig.gpg && \
    sudo apt update && sudo apt install -y 1password 1password-cli
  fi

  # op account add my.1password.eu
  # op account add plantura.1password.eu
}

function install_nvm() {
  if [ -d "$XDG_CONFIG_HOME/nvm" ]; then
    echo "nvm already installed"
  else
    PROFILE=/dev/null bash -c 'curl -s -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash'
    nvm install stable
  fi
}

function install_difftastic() {
  if type difft &> /dev/null; then
    echo "difft is already installed"
  else
    REPO="Wilfred/difftastic"
    PLATFORM=$(uname -s | tr '[:upper:]' '[:lower:]')
    LATEST_TAG=$(curl -s "https://api.github.com/repos/$REPO/releases/latest" | grep 'tag_name' | cut -d\" -f4)
    echo "Latest difftastic version: $LATEST_TAG"
    FILENAME="difft-x86_64-unknown-linux-gnu.tar.gz"
    URL="https://github.com/$REPO/releases/download/${LATEST_TAG}/${FILENAME}"

    mkdir -p "$XDG_BIN_HOME"

    # Download the file to a temporary location
    TEMP_ZIP="/tmp/$FILENAME"
    curl -s -L -o "$TEMP_ZIP" "$URL"

    # Extract the binary to a temporary directory
    tar -xzf "$TEMP_ZIP" -C "$XDG_BIN_HOME/"

    # Ensure the binary is executable
    chmod +x "$XDG_BIN_HOME/difft"

    # Clean up the temporary files and directory
    rm "$TEMP_ZIP"

    echo "difft has been installed to $XDG_BIN_HOME and is available in your PATH."
  fi
}

function build_neovim() {
  if type nvim &> /dev/null; then
    echo "nvim is already installed"
  else
    sudo apt-get install -y ninja-build gettext cmake curl build-essential
    git clone https://github.com/neovim/neovim "$XDG_CACHE_HOME/nvim-src"
    pushd "$XDG_CACHE_HOME/nvim-src"
    rm -r build/  # clear the CMake cache
    make CMAKE_EXTRA_FLAGS="-DCMAKE_INSTALL_PREFIX=$XDG_BIN_HOME/neovim-src"
    make install
    ln -s "$XDG_BIN_HOME/neovim-src/bin/nvim" "$XDG_BIN_HOME/nvim"
  fi
}

function install_yadm() {
  if [ -d "$XDG_DATA_HOME/yadm/repo.git" ]; then
    echo "YADM is already installed"
  else
    yadm clone git@github.com:mblarsen/dotfiles.git
  fi
}

function install_zplug() {
  if [ -d "$ZPLUG_HOME" ]; then
    echo "zplug already installed"
  else
    curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh | zsh
  fi
}

function install_synchthing() {
  if type syncthing &> /dev/null; then
    echo "syncthing already installed"
  else
    sudo mkdir -p /etc/apt/keyrings
    sudo curl -s -L -o /etc/apt/keyrings/syncthing-archive-keyring.gpg https://syncthing.net/release-key.gpg
    echo "deb [signed-by=/etc/apt/keyrings/syncthing-archive-keyring.gpg] https://apt.syncthing.net/ syncthing stable" | sudo tee /etc/apt/sources.list.d/syncthing.list
    sudo apt-get update
    sudo apt-get install -y syncthing
    sudo systemctl enable syncthing@mbl.service
    sudo systemctl start syncthing@mbl.service
  fi
}

function install_posting() {
  if type posting &> /dev/null; then
    echo "posting is already installed"
  else
    pip install pipx
    pipx install posting
  fi
}

function install_psql_tooling() {
  if type pgcli &> /dev/null; then
    echo "pgcli is already installed"
  else
    sudo apt install -y libpq-dev
    pip install pipx psycopg-binary
    pipx install pgcli
  fi
  if type psql &> /dev/null; then
    echo "psql client is already installed"
  else
    sudo apt install -y postgresql-client
  fi
}

function install_lazysql() {
  if type lazysql &> /dev/null; then
    echo "lazysql is already installed"
  else
    curl -s -L https://github.com/jorgerojas26/lazysql/releases/download/v0.3.4/lazysql_Linux_x86_64.tar.gz -o /tmp/lazysql.tar.gz
    tar xzf /tmp/lazysql.tar.gz -C $XDG_BIN_HOME lazysql
  fi
}

function install_tmux_pm() {
  if [ -d $XDG_DATA_HOME/tmux/plugins/tpm ]; then
    echo "tmux pm is already installed"
  else
    mkdir -p $XDG_DATA_HOME/tmux/plugins
    git clone https://github.com/tmux-plugins/tpm $XDG_DATA_HOME/tmux/plugins/tpm
  fi
}

function install_pip_app() {
  PKG=$1
  BIN=${2:-$PKG}

  if type "$BIN" &> /dev/null; then
    echo "$BIN is already installed"
  else 
    pip install "$PKG"
  fi
}

function install_pyenv() {
  if type pyenv &> /dev/null; then
    echo "pyenv is already installed"
  else
    curl https://pyenv.run | bash
    pyenv install 3.11.11
    pyenv global 3.11.11
  fi
}

setup_ssh
build_neovim
install_pyenv
install_yadm
install_zplug
install_1password
install_docker
install_rustup
install_synchthing

install_difftastic
install_gh
install_nvm
install_psql_tooling
install_posting
install_taskwarrior
install_tmux_pm
install_pip_app pre-commit
